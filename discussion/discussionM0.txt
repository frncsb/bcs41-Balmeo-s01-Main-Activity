/*
Mini-Activity
-screenshot the folder and files tree structure of your created repo
*/

CLI Commands
    -Command-Line Interface
        -a text-based tool that lets the user to communicate with your computer or software by typing specific commands

Advantages of CLI Commands
    1. efficiency
    2. automation 
    3. remote access
    4. resource efficiency
    5. reproducibility

~(tilde)
    - a special character with specific meaning in various context, it represent home directory
        example: cd ~

MINGW64
    -also known as minimalist GNU for windows 64bot
    - a development environment and runtime for creating native Windows application using the GNU Compiler Collection. 

        -- GNU
            - it means GNU's Not Unix

Nav Commands
    -cd : Change directory
        - allows to change the current folder we are working on
        syntax:
            cd <folder/directory>
        example:
        cd Documents

    -pwd : present working directory
        - allows us to identify the current fodler we are working on.
        syntax:
        pwd

    -ls : list files
        - it allows us to list all the files and folders
            syntax:
            ls

File Manipulation Commands
    -mkdir : make directory
        - allows us to create folder/directory
        syntax:
        mkdir <folderName>
        exmaple:
        mkdir s01
    - touch : create an empty files
        - allows us to create files
        syntax:
            touch <filename>
        example:
            touch discussion.txt

subl . >> opens sublime editor
code . >> opens VSCode editor

Git VCS 
    - an open source version control system. Allows to track and update our foles with ONLY CHANGES MADE TO IT.

SSH/Secure Shell Key - a cryptographic key pair used to establish  secure and encrypted communication between a client and a server. 
- tools we use to authenticate the uploadeing or of other tasks when manipulating or using git reposistories.
- allows us to push/upload changes to our repositories without hte need for passwords

Basic Git Commands
    - git status
        - used within the Git repo to display the current status of your working directory and staging area.

    - git init
        - git initialization is used to start a new repo.


    - git add .
        - used in Git to stage (preparing for a commit) all changes in the current directory

    - git commit -m"commit message"
        -used in Git to record the changes you've staged(prepared to commit) into the version history of your repo
        -- -m
            - used to provide commit message that describe the purpose of the commit
            - the commit messafe helps us and the others understand the changes made in that commit.

Git Config
    - these commands will allow us to have got recognize the person trying to push into an online/remote repo

    - git config --global user.email ""
        -configure the email to push into the remote repo
       - git config --global user.name ""
        -configure the username of the user trying to push into remote repo
    
    verify
        -git config --global --list
        -git config --global --get user.email
        -git config --global 

Push for the first time
    1. git init
    2. git status
    3. git add .
    4. git commit -m "message"
    5. git remote add <url>
    6. git remote -v
    7. git push origin master

Push for update
    1. git status
    2. git add .
    3. git commit -m ""
    4. git remote -v 
    5. git push origin master


/*
Main activity (activity folder of session)

1. In the s01 folder, change dir from discussion to activity folder and create a new file inside the activity folder and name it aboutMe.txt

2. Peek at the states of the files/folders using git status

3. stage the files in preparation for creating a commit using git add.

4. Create a commit message -m "Initialize activity"

5. Wirte a brief story about yourself on google docs or word

6. Save your work

7. Check the commit history using git log/ git log --oneline.

8. Add a pragraph that describes your motivation in joining the boot camp

9. Check the status of the files/folders, stage  the files and create a commit.

10. Add a paragraph that briefly narrates your work experience.

11. Check the status of the files/folders, stage  the files and create a commit.

12. Connect to a repository using git remote and add origin.

13. Upload changes to GitHub Project by doing git push origin master

14. Add the link and screenshot the Git Hub and GitBash
*/